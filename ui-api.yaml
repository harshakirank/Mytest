openapi: 3.0.0
info: {
  title: Salesforce Connect API,
  description: '',
  version: 45.0-2018.10.17.23.41
}
servers:
  - url: https://mobile1.t.salesforce.com/services/data/v45.0
security:
  - OAuth2:
    - web
    - webS
paths:
  /ui-api/apps:
    get:
      description: Retrieves the list of apps accessible for current user
      operationId: Test123
      tags:
        - apps
      summary: gets a list of Example1
      parameters: [
        ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/AppsRepresentation'
              }
      security:
        - OAuth2:
          - web

  /ui-api/apps/selected:
    get:
      description: Retrieves an app current user last selected or should see by default
      tags:
        - apps
      summary: gets a list of Example2
      parameters:
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: ''
        in: query
        name: userCustomizations
        schema: {
          type: boolean
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/AppRepresentation'
              }
  /ui-api/apps/{appId}:
    get:
      description: Retrieves an app for the given app ID
      tags:
        - apps
      summary: gets a list of id
      parameters:
      - description: ''
        in: path
        name: appId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: ''
        in: query
        name: userCustomizations
        schema: {
          type: boolean
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/AppRepresentation'
              }
    patch:
      description: Returns the app metadata for the given App id and also saves this app as Last accessed app for the user
      tags:
        - apps
      summary: Example update user
      parameters:
      - description: ''
        in: path
        name: appId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: ''
        in: query
        name: userCustomizations
        schema: {
          type: boolean
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/AppRepresentation'
              }
  /ui-api/apps/{appId}/user-nav-items:
    get:
      description: Retrieves the user's personalized nav items.
      tags:
        - apps
      summary: Retrieves the user's  nav items
      parameters:
      - description: ''
        in: path
        name: appId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/NavItemsRepresentation'
              }
  /ui-api/duplicates/{objectApiName}:
    get:
      description: Get duplicate management configuration for a specific entity object
      tags:
        - dupliates
      summary: Example Retrieves entity object
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/DuplicatesConfigurationRepresentation'
              }
  /ui-api/favorites:
    get:
      description: Gets a collection of favorites.
      tags:
        - favorites
      summary: Example collection of favorites
      parameters: [
        ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/FavoriteCollectionRepresentation'
              }
    post:
      description: Creates a single favorite.
      tags:
        - favorites
      summary: Example Creates single favorite
      parameters:
      - description: ''
        in: query
        name: name
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: sortOrder
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: target
        schema: {
          type: string
        }
      - description: 'Available values: ListView, ObjectHome, Record, Tab'
        in: query
        name: targetType
        schema:
          type: string
          enum: [
            ListView,
            ObjectHome,
            Record,
            Tab]

        style: form
      requestBody:
        content:
          application/json:
            schema: {
              $ref: '#/components/schemas/FavoriteInputRepresentation'
            }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/FavoriteRepresentation'
              }
  /ui-api/favorites/batch:
    put:
      description: Updates all favorites at once. Sort order is updated to the given relative ordering and any favorites missing from the input payload are deleted.
      tags:
        - favorites
      summary: Example Updates all favorites
      parameters: [
        ]
      requestBody:
        content:
          application/json:
            schema: {
              $ref: '#/components/schemas/FavoriteBatchCollectionInputRepresentation'
            }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/FavoriteCollectionRepresentation'
              }
  /ui-api/favorites/{favoriteId}:
    delete:
      description: Deletes a single favorite by ID.
      tags:
        - favorites
      summary: Example Deletes a favorite by ID
      parameters:
      - description: ''
        in: path
        name: favoriteId
        required: true
        schema: {
          type: string
        }
      responses:
        '200': {
          description: Success
        }
    get:
      description: Retrieve a single favorite by ID.
      tags:
        - favorites
      summary: Example Retrieve a favorite by ID
      parameters:
      - description: ''
        in: path
        name: favoriteId
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/FavoriteRepresentation'
              }
    patch:
      description: Updates a single favorite by ID.
      tags:
        - favorites
      summary: Example Updates a single by ID
      parameters:
      - description: ''
        in: path
        name: favoriteId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: name
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: sortOrder
        schema: {
          type: integer
        }
      requestBody:
        content:
          application/json:
            schema: {
              $ref: '#/components/schemas/FavoriteInputRepresentation'
            }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/FavoriteRepresentation'
              }
  /ui-api/favorites/{favoriteId}/usage:
    patch:
      description: Increments the accessCount and sets the lastAccessDate to the current system time.
      tags:
        - favorites
      summary: Example increment lastAccessDate
      parameters:
      - description: ''
        in: path
        name: favoriteId
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/FavoriteRepresentation'
              }
  /ui-api/forms/{apiName}:
    get:
      description: Retrieve a specific form by name.
      tags:
        - forms
      summary: Example Retrieve specific form by name
      parameters:
      - description: ''
        in: path
        name: apiName
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/FormRepresentation'
              }
  /ui-api/layout/{objectApiName}:
    get:
      description: Retrieve a specific layout.
      tags:
        - forms
      summary: Example Retrieve a specific layout
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: 'Available values: Compact, Full'
        in: query
        name: layoutType
        schema:
          type: string
          enum: [
            Compact,
            Full]

        style: form
      - description: 'Available values: Create, Edit, View'
        in: query
        name: mode
        schema:
          type: string
          enum: [
            Create,
            Edit,
            View]

        style: form
      - description: ''
        in: query
        name: recordTypeId
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordLayoutRepresentation'
              }
  /ui-api/layout/{objectApiName}/user-state:
    get:
      description: Retrieve a specific layout's user state.
      tags:
        - layout
      summary: Example Retrieve layout's user state
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: 'Available values: Compact, Full'
        in: query
        name: layoutType
        schema:
          type: string
          enum: [
            Compact,
            Full]

        style: form
      - description: 'Available values: Create, Edit, View '
        in: query
        name: mode
        schema:
          type: string
          enum: [
            Create,
            Edit,
            View]

        style: form
      - description: ''
        in: query
        name: recordTypeId
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordLayoutUserStateRepresentation'
              }
    patch:
      description: Update a specific layout's user state.
      tags:
        - layout
      summary: Example specific layout's user state
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: 'Available values: Compact, Full'
        in: query
        name: layoutType
        schema:
          type: string
          enum: [
            Compact,
            Full]

        style: form
      - description: 'Available values: Create, Edit, View '
        in: query
        name: mode
        schema:
          type: string
          enum: [
            Create,
            Edit,
            View]

        style: form
      - description: ''
        in: query
        name: recordTypeId
        schema: {
          type: string
        }
      requestBody:
        content:
          application/json:
            schema: {
              $ref: '#/components/schemas/RecordLayoutUserStateInputRepresentation'
            }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordLayoutUserStateRepresentation'
              }
  /ui-api/list-info/{listViewId}:
    get:
      description: Retrieve list info.
      tags:
        - listinfo
      summary: Example Retrieve list info
      parameters:
      - description: ''
        in: path
        name: listViewId
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListInfoRepresentation'
              }
  /ui-api/list-info/{objectApiName}/{listViewApiName}:
    get:
      description: Retrieve list info.
      tags:
        - listinfo
      summary: Example Retrieve list info
      parameters:
      - description: ''
        in: path
        name: listViewApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListInfoRepresentation'
              }
  /ui-api/list-records/{listViewId}:
    get:
      description: Returns record data to populate a list.
      tags:
        - listrecords
      summary: Example  populate a list
      parameters:
      - description: ''
        in: path
        name: listViewId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageToken
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: sortBy
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListRecordCollectionRepresentation'
              }
  /ui-api/list-records/{objectApiName}/{listViewApiName}:
    get:
      description: Returns record data to populate a list.
      tags:
        - listrecords
      summary: Example  populate a list
      parameters:
      - description: ''
        in: path
        name: listViewApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageToken
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: sortBy
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListRecordCollectionRepresentation'
              }
  /ui-api/list-ui/{listViewId}:
    get:
      description: Retrieve list data and info.
      tags:
        - listui
      summary: Example  list data and info.
      parameters:
      - description: ''
        in: path
        name: listViewId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageToken
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: sortBy
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListUiRepresentation'
              }
  /ui-api/list-ui/{objectApiName}:
    get:
      description: Retrieve lists for a given objectApiName.
      tags:
        - listui
      summary: Example  list given objectApiName.
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageToken
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: q
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: recentListsOnly
        schema: {
          type: boolean
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListViewSummaryCollectionRepresentation'
              }
  /ui-api/list-ui/{objectApiName}/{listViewApiName}:
    get:
      description: Retrieve list data and info.
      tags:
        - listui
      summary: Example  list data and info.
      parameters:
      - description: ''
        in: path
        name: listViewApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageToken
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: sortBy
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListUiRepresentation'
              }
  /ui-api/lookups/{objectApiName}/{fieldApiName}:
    get:
      description: Returns record search results for the given lookup field.
      tags:
        - lookups
      summary: Example  return lookup field.
      parameters:
      - description: ''
        in: path
        name: fieldApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: dependentFieldBindings
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: page
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: q
        schema: {
          type: string
        }
      - description: 'Available values: Recent, Search, TypeAhead'
        in: query
        name: searchType
        schema:
          type: string
          enum: [
            Recent,
            Search,
            TypeAhead]

        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/LookupValuesRepresentation'
              }
  /ui-api/lookups/{objectApiName}/{fieldApiName}/{targetApiName}:
    get:
      description: Returns record search results for the given lookup field.
      tags:
        - lookups
      summary: Example  return lookup field.
      parameters:
      - description: ''
        in: path
        name: fieldApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: targetApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: dependentFieldBindings
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: page
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: q
        schema: {
          type: string
        }
      - description: 'Available values: Recent, Search, TypeAhead'
        in: query
        name: searchType
        schema:
          type: string
          enum: [
            Recent,
            Search,
            TypeAhead]

        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordCollectionRepresentation'
              }
  /ui-api/mru-list-info/{objectApiName}:
    get:
      description: Retrieve MRU list info.
      tags:
        - mrulistinfo
      summary: Example  return MRU list info.
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListInfoRepresentation'
              }
  /ui-api/mru-list-records/{objectApiName}:
    get:
      description: Returns record data to populate an MRU list.
      tags:
        - mrulistrecords
      summary: Example  populate an MRU list.
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageToken
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: sortBy
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListRecordCollectionRepresentation'
              }
  /ui-api/mru-list-ui/{objectApiName}:
    get:
      description: Retrieve MRU list data and info.
      tags:
        - mrulistui
      summary: Example  MRU list data and info.
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageToken
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: sortBy
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ListUiRepresentation'
              }
  /ui-api/nav-items:
    get:
      description: Fetch all the nav items
      tags:
        - navitems
      summary: Example  Fetch all the nav items.
      parameters:
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: ''
        in: query
        name: page
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/NavItemsRepresentation'
              }
  /ui-api/object-info:
    get:
      description: Retrieve the object info directory.
      tags:
        - objectinfo
      summary: Example  Fetch object info directory.
      parameters: [
        ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ObjectInfoDirectoryRepresentation'
              }
  /ui-api/object-info/{objectApiName}:
    get:
      description: Retrieve metadata about a specific object.
      tags:
        - objectinfo
      summary: Example  metadata about.
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ObjectInfoRepresentation'
              }
  /ui-api/object-info/{objectApiName}/picklist-values/{recordTypeId}:
    get:
      description: Returns the values for all picklist fields for a recordType
      tags:
        - objectinfo
      summary: Example values for all picklist fields.
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: recordTypeId
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/PicklistValuesCollectionRepresentation'
              }
  /ui-api/object-info/{objectApiName}/picklist-values/{recordTypeId}/{fieldApiName}:
    get:
      description: Returns the values for a specific picklist.
      tags:
        - objectinfo
      summary: Example values for all picklist fields.
      parameters:
      - description: ''
        in: path
        name: fieldApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: recordTypeId
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/PicklistValuesRepresentation'
              }
  /ui-api/object-info/{objectApiName}/validation-rules-info:
    get:
      description: Retrieve metadata of validation rules for the given object
      tags:
        - objectinfo
      summary: Example meta of given object.
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ValidationRulesRepresentation'
              }
  /ui-api/predupe:
    post:
      description: Performs a predupe check on given a record.
      tags:
        - predupe
      summary: Example predupe of given object.
      parameters: [
        ]
      requestBody:
        content:
          application/json:
            schema: {
              $ref: '#/components/schemas/RecordInputRepresentation'
            }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/DuplicatesRepresentation'
              }
  /ui-api/record-avatars/batch/{recordIds}:
    get:
      description: Retrieve avatar information about specific records.
      tags:
        - recordavatars
      summary: Example avatar of given object.
      parameters:
      - description: ''
        in: path
        name: recordIds
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/BatchRepresentation'
              }
  /ui-api/record-avatars/{recordId}:
    get:
      description: Retrieve avatar information about specific records.
      tags:
        - recordavatars
      summary: Example avatar of given record.
      parameters:
      - description: ''
        in: path
        name: recordId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/AbstractRecordAvatarRepresentation'
              }
  /ui-api/record-defaults/clone/{recordId}:
    get:
      description: Retrieve default values for fields for cloning a record with optional record type.
      tags:
        - recorddefaults
      summary: Example cloning a record.
      parameters:
      - description: ''
        in: path
        name: recordId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: recordTypeId
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordDefaultsRepresentation'
              }
  /ui-api/record-defaults/create/{objectApiName}:
    get:
      description: Retrieve default values for fields for a new record of a particular object and optional record type.
      tags:
        - recorddefaults
      summary: Example default values for fields.
      parameters:
      - description: ''
        in: path
        name: objectApiName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: recordTypeId
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordDefaultsRepresentation'
              }
  /ui-api/record-ui/{recordIds}:
    get:
      description: Retrieve presentation-ready metadata and data about specific records.
      tags:
        - recordui
      summary: Example presentation-ready metadata.
      parameters:
      - description: ''
        in: path
        name: recordIds
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: childRelationships
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: formFactor
        schema: {
          type: string
        }
        style: form
      - description: 'Available values: Compact, Full'
        in: query
        name: layoutTypes
        schema:
          type: array
          items:
            type: string
            enum: [
              Compact,
              Full]

        style: form
      - description: 'Available values: Create, Edit, View'
        in: query
        name: modes
        schema:
          type: array
          items:
            type: string
            enum: [
              Create,
              Edit,
              View]

        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: updateMru
        schema: {
          type: boolean
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordUiRepresentation'
              }
  /ui-api/records:
    post:
      description: Create a new record.
      tags:
        - records
      summary: Example Create a new record.
      parameters:
      - description: ''
        in: query
        name: allowSaveOnDuplicate
        schema: {
          type: boolean
        }
      requestBody:
        content:
          application/json:
            schema: {
              $ref: '#/components/schemas/RecordInputRepresentation'
            }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordRepresentation'
              }
  /ui-api/records/batch/{recordIds}:
    get:
      description: Retrieve record data for a list of recordIds.
      tags:
        - records
      summary: Example Create a new record.
      parameters:
      - description: ''
        in: path
        name: recordIds
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: childRelationships
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: 'Available vlues: Compact, Full'
        in: query
        name: layoutTypes
        schema:
          type: array
          items:
            type: string
            enum: [
              Compact,
              Full]

        style: form
      - description: 'Available values: Create, Edit, View'
        in: query
        name: modes
        schema:
          type: array
          items:
            type: string
            enum: [
              Create,
              Edit,
              View]

        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: updateMru
        schema: {
          type: boolean
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/BatchRepresentation'
              }
  /ui-api/records/{recordId}:
    delete:
      description: Delete record.
      tags:
        - records
      summary: Example Create a new record.
      parameters:
      - description: ''
        in: path
        name: recordId
        required: true
        schema: {
          type: string
        }
      responses:
        '200': {
          description: Success
        }
    get:
      description: Retrieve record data.
      tags:
        - records
      summary: Example Create a new record.
      parameters:
      - description: ''
        in: path
        name: recordId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: childRelationships
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: forms
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: 'Available values: Compact, Full'
        in: query
        name: layoutTypes
        schema:
          type: array
          items:
            type: string
            enum: [
              Compact,
              Full]

        style: form
      - description: 'Available values: Create, Edit, View'
        in: query
        name: modes
        schema:
          type: array
          items:
            type: string
            enum: [
              Create,
              Edit,
              View]

        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: updateMru
        schema: {
          type: boolean
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordRepresentation'
              }
    patch:
      description: Update an existing record.
      tags:
        - records
      summary: Example Create a new record.
      parameters:
      - description: ''
        in: path
        name: recordId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: allowSaveOnDuplicate
        schema: {
          type: boolean
        }
      requestBody:
        content:
          application/json:
            schema: {
              $ref: '#/components/schemas/RecordInputRepresentation'
            }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordRepresentation'
              }
  /ui-api/records/{recordId}/child-relationships/{relationshipName}:
    get:
      description: Retrieve child relationship data on a parent record.
      tags:
        - records
      summary: Example Create a new record.
      parameters:
      - description: ''
        in: path
        name: recordId
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: path
        name: relationshipName
        required: true
        schema: {
          type: string
        }
      - description: ''
        in: query
        name: fields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: optionalFields
        schema:
          type: array
          items: {
            type: string
          }
        style: form
      - description: ''
        in: query
        name: page
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageSize
        schema: {
          type: integer
        }
      - description: ''
        in: query
        name: pageToken
        schema: {
          type: string
        }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/RecordCollectionRepresentation'
              }
  /ui-api/themes/active:
    get:
      description: Retrieve the active theme.
      tags:
        - themes
      summary: Example Create a new record.
      parameters: [
        ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema: {
                $ref: '#/components/schemas/ThemeRepresentation'
              }
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://mobile1.t.salesforce.com/services/oauth2/authorize
          scopes:
            web: Modify Data
            webC: Modify Data
  schemas:
    AbstractFormSubitemRepresentation:
      type: object
      description: Form Subitem
      properties:
        subitemType:
          description: 'Subitem type. Available values: EmptySpace, Field'
          type: string
          enum: [
            EmptySpace,
            Field]

    AbstractPicklistValueAttributesRepresentation:
      type: object
      description: Additional picklist value attributes.
      properties:
        picklistAtrributesValueType:
          description: 'Indicates the type of picklist attribute value. Available values: LeadStatus, OpportunityStage, Standard'
          type: string
          enum: [
            LeadStatus,
            OpportunityStage,
            Standard]

    AbstractRecordAvatarRepresentation:
      type: object
      description: Represents an avatar associated to a record.
      properties:
        recordId: {
          description: The ID of the record that this avatar is associated to.,
          type: string
        }
        type:
          description: 'Indicates the type of record avatar. Available values: Photo, Theme'
          type: string
          enum: [
            Photo,
            Theme]

    AbstractRecordLayoutComponentRepresentation:
      type: object
      description: Record layout component.
      properties:
        apiName: {
          description: 'The API name of the field powering this component, if there
            is one. The API name of the field if the componentType is Field. The API
            name of the canvas app if the componentType is Canvas.',
          type: string
        }
        componentType:
          description: 'Component type. Available values: Canvas, CustomLink, EmptySpace, Fields, ReportChart, VisualforcePage'
          type: string
          enum: [
            Canvas,
            CustomLink,
            EmptySpace,
            Field,
            ReportChart,
            VisualforcePage]

    ActionRepresentation:
      type: object
      description: Actions.
      properties:
        actions:
          description: Record data with some metatdata.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/EntityActionRepresentation'
          }
        url: {
          description: the url of the current request,
          type: string
        }
    AggregateInputRepresentation:
      type: object
      description: The operations that are to be executed within aggregate
      properties:
        compositeRequest:
          description: The list of operations to be executed
          type: array
          items: {
            type: object
          }
    AggregateRepresentation:
      type: object
      description: The result of all operations
      properties:
        compositeResponse:
          description: The responses from the execution
          type: array
          items: {
            $ref: '#/components/schemas/OperationResponseRepresentation'
          }
    AggregateUiRepresentation:
      type: object
      description: Aggregate UI.
      properties:
        forms:
          description: Map of Form API Name -> Form.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/FormRepresentation'
          }
        layoutUserStates:
          description: Map of layout ID -> user state.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/RecordLayoutUserStateRepresentation'
          }
        layouts:
          description: Record layouts.
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: object
              additionalProperties:
                type: object
                additionalProperties: {
                  $ref: '#/components/schemas/RecordLayoutRepresentation'
                }
        objectInfos:
          description: Object metadata.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/ObjectInfoRepresentation'
          }
        records:
          description: Record data.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/RecordRepresentation'
          }
    AppRepresentation:
      type: object
      description: Metadata for an app
      properties:
        appId: {
          description: Reference to App Definition,
          type: string
        }
        description: {
          description: Description for the app,
          type: string
        }
        developerName: {
          description: Unique developer name of the app,
          type: string
        }
        formFactors:
          description: Device form factors in which this app is supported
          type: array
          items: {
            type: string
          }
        headerColor: {
          description: 'Primary color selected by admin for this app. Ex: #0070D2',
          type: string
        }
        iconUrl: {
          description: Icon URL of the App,
          type: string
        }
        isNavAutoTempTabsDisabled: {
          description: Nav automatically create temporary tabs setting,
          type: boolean
        }
        isNavPersonalizationDisabled: {
          description: Nav personalization setting,
          type: boolean
        }
        label: {
          description: Label of the app,
          type: string
        }
        logoUrl: {
          description: URL of the logo uploaded by Admin for this app,
          type: string
        }
        mobileStartUrl: {
          description: Mobile specific launch url for this app,
          type: string
        }
        navItems:
          description: tabs/nav items for the app
          type: array
          items: {
            $ref: '#/components/schemas/NavItemRepresentation'
          }
        selected: {
          description: Flag to specify if this app is the default app for the user,
          type: boolean
        }
        startUrl: {
          description: Launch URL for this app,
          type: string
        }
        uiType:
          description: 'UI type of the app - Classic/Lightning. Available values: Classic, Lightning'
          type: string
          enum: [
            Classic,
            Lightning]

        userNavItems:
          description: User's nav items for the app, if applicable and requested.
          type: array
          items: {
            $ref: '#/components/schemas/NavItemRepresentation'
          }
    AppsRepresentation:
      type: object
      description: A list of apps accessible for current user.
      properties:
        apps:
          description: apps list
          type: array
          items: {
            $ref: '#/components/schemas/AppRepresentation'
          }
    BatchRepresentation: {
      type: object
    }
    CanvasLayoutComponentRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractRecordLayoutComponentRepresentation'
      }
      - type: object
        description: Canvas record layout component.
        properties:
          displayLocation: {
            description: Display location,
            type: string
          }
          height: {
            description: Height,
            type: string
          }
          referenceId: {
            description: Reference ID,
            type: string
          }
          showScroll: {
            description: Show scroll,
            type: boolean
          }
          width: {
            description: Width,
            type: string
          }
    ChildRelationshipRepresentation:
      type: object
      description: Child Relationship.
      properties:
        childObjectApiName: {
          description: The token of the child Object on which there is a foreign key back to the parent Object.,
          type: string
        }
        fieldName: {
          description: The token of the field that has a foreign key back to the parent Object.,
          type: string
        }
        junctionIdListNames:
          description: If this relationship uses a junction ID list, this contains a list of potentially polymorphic types to which the IDs in this relationship's junction ID list can resolve.
          type: array
          items: {
            type: string
          }
        junctionReferenceTo:
          description: A list of zero or more query-able junction ID list names this relationship may use. These names can be queried like field.
          type: array
          items: {
            type: string
          }
        relationshipName: {
          description: The name of the relationship.,
          type: string
        }
    CustomLinkLayoutComponentRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractRecordLayoutComponentRepresentation'
      }
      - type: object
        description: Custom link record layout component.
        properties:
          behavior:
            description: 'Custom Link behavior. Available values: NewWindow, NoSidebar, OnClickJavaScript, Replace, Sidebar'
            type: string
            enum: [
              NewWindow,
              NoSidebar,
              OnClickJavaScript,
              Replace,
              Sidebar]

          customLinkUrl: {
            description: Custom link URL,
            type: string
          }
          label: {
            description: Label,
            type: string
          }
    DuplicateRecordErrorRepresentation:
      type: object
      description: Duplicate record error.
      properties:
        matchResults:
          description: Duplicate rule match results.
          type: array
          items: {
            $ref: '#/components/schemas/MatchResultRepresentation'
          }
    DuplicateResultInfoRepresentation:
      type: object
      description: Duplicate Result Info
      properties:
        allowSave: {
          description: Indicates whether duplicates are allowed to be saved.,
          type: boolean
        }
        matchResultInfo: {
          $ref: '#/components/schemas/MatchResultInfoRepresentation'
        }
        rule: {
          description: Name of Duplicate rule.,
          type: string
        }
    DuplicateRuleFilterItemRepresentation:
      type: object
      description: 'Duplicate Rule filter item '
      properties:
        field: {
          description: The field name on which filter is set.,
          type: string
        }
        operation: {
          description: Operation to be used.,
          type: string
        }
        sortOrder: {
          description: The order in which filter item was added to the filter.,
          type: integer
        }
        value: {
          description: The value of field to evaluate operation.,
          type: string
        }
    DuplicateRuleFilterRepresentation:
      type: object
      description: 'Duplicate Rule filter '
      properties:
        booleanFilter: {
          description: The custom filter logic expressed as a boolean expression.,
          type: string
        }
        filterItems:
          description: List of filter items.
          type: array
          items: {
            $ref: '#/components/schemas/DuplicateRuleFilterItemRepresentation'
          }
        ruleCritera: {
          description: Rule Criteria.,
          type: string
        }
    DuplicateRuleRepresentation:
      type: object
      description: Duplicate Rule for dedupe configuration
      properties:
        actionOnInsert:
          description: 'Action on insert, Block or Allow for dedupe rule. Available values: Allow, Block'
          type: string
          enum: [
            Allow,
            Block]

        actionOnUpdate:
          description: 'Action on update, Block or Allow for dedupe rule. Available values: Allow, Block'
          type: string
          enum: [
            Allow,
            Block]

        active: {
          description: Determine whether dedupe rule is active.,
          type: boolean
        }
        duplicateRuleFilters:
          description: Duplicate filters.
          type: array
          items: {
            $ref: '#/components/schemas/DuplicateRuleFilterRepresentation'
          }
        matchRules:
          description: MatchRules for the current DuplicateRule.
          type: array
          items: {
            $ref: '#/components/schemas/MatchRuleRepresentation'
          }
        name: {
          description: Name of Duplicate rule.,
          type: string
        }
        operationsOnInsert:
          description: 'Operations on insert, either or both of alert and report for dedupe rule. Available values: Alert, Report'
          type: array
          items:
            type: string
            enum: [
              Alert,
              Report]

        operationsOnUpdate:
          description: 'Operations on update, either or both of alert and report for dedupe rule. Available values: Alert, Report'
          type: array
          items:
            type: string
            enum: [
              Alert,
              Report]

    DuplicatesConfigurationRepresentation:
      type: object
      description: 'Duplicate Configuration for an object API. '
      properties:
        dedupeEnabled: {
          description: Determine dedupe is enabled/disabled,
          type: boolean
        }
        dedupeFields:
          description: Dedupe fields used in config.
          type: array
          items: {
            type: string
          }
        duplicateRules:
          description: Duplicate rules used in dedupe config.
          type: array
          items: {
            $ref: '#/components/schemas/DuplicateRuleRepresentation'
          }
        predupeEnabled: {
          description: Determine predupe is enabled/disabled.,
          type: boolean
        }
    DuplicatesRepresentation:
      type: object
      description: 'Duplicates '
      properties:
        allowSave: {
          description: Determince whether duplicates are allowed to be saved,
          type: boolean
        }
        duplicateError: {
          description: Determine if there  exists duplicates.,
          type: boolean
        }
        duplicateRules:
          description: Duplicate rules used for match.
          type: array
          items: {
            type: string
          }
        matches:
          description: A list of potential matches.
          type: array
          items: {
            $ref: '#/components/schemas/MatchRepresentation'
          }
    EmptySpaceFormSubitemRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractFormSubitemRepresentation'
      }
      - type: object
        description: Empty Space Subitem.
        properties: {
          }
    EntityActionRepresentation:
      type: object
      description: Entity's Actions.
      properties:
        actions:
          description: Record data.
          type: array
          items: {
            $ref: '#/components/schemas/PlatformActionRepresentation'
          }
        links:
          description: subconext's api url of the current current entity request
          type: array
          items: {
            type: string
          }
        url: {
          description: the url of the current entity request,
          type: string
        }
    FavoriteBatchCollectionInputRepresentation:
      type: object
      description: Represents all favorites when updating favorites in batch.
      properties:
        favorites:
          description: The list of favorites to keep and update.
          type: array
          items: {
            type: object
          }
    FavoriteBatchInputRepresentation:
      type: object
      description: Represents a single favorite when updating favorites in batch.
      properties:
        id: {
          description: ID of the favorite.,
          type: string
        }
        name: {
          description: The name of the favorite.,
          type: string
        }
    FavoriteCollectionRepresentation:
      type: object
      description: A list of favorites.
      properties:
        favorites:
          description: The list of favorites.
          type: array
          items: {
            $ref: '#/components/schemas/FavoriteRepresentation'
          }
    FavoriteInputRepresentation:
      type: object
      description: Create or update a favorite.
      properties:
        name: {
          description: The name of the favorite.,
          type: string
        }
        sortOrder: {
          description: 'The sort order of the favorite, from 1 to N.',
          type: integer
        }
        target: {
          description: 'The record, API name, or content being favorited.',
          type: string
        }
        targetType:
          description: 'The type of favorite. Available values: ListView, ObjectHome, Record, Tab'
          type: string
          enum: [
            ListView,
            ObjectHome,
            Record,
            Tab]

    FavoriteRepresentation:
      type: object
      description: A representation of a single favorite.
      properties:
        accessCount: {
          description: The number of times this favorite has been used.,
          type: integer
        }
        iconColor: {
          description: 'The color of the icon for this favorite, usually the related
            entity''s color.',
          type: string
        }
        iconUrl: {
          description: 'The URL of the icon for the favorite, usually the related
            entity''s icon.',
          type: string
        }
        id: {
          description: ID of the favorite.,
          type: string
        }
        lastAccessDate: {
          description: The last time this favorite was used.,
          type: string
        }
        name: {
          description: The name of the favorite.,
          type: string
        }
        objectType: {
          description: 'The developer name of the entity associated with this favorite,
            if any.',
          type: string
        }
        sortOrder: {
          description: 'The sort order of the favorite, from 1 to N.',
          type: integer
        }
        subtitle: {
          description: 'Subtitle of the favorite, usually the entity''s label. Provides
            additional information about the type of record or content being favorited.',
          type: string
        }
        target: {
          description: 'The record, API name, or content being favorited.',
          type: string
        }
        targetType:
          description: 'The type of record or content being favorited. Available values: ListView, ObjectHome, record, Tab'
          type: string
          enum: [
            ListView,
            ObjectHome,
            Record,
            Tab]

    FieldFormSubitemRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractFormSubitemRepresentation'
      }
      - type: object
        description: Field form subitem.
        properties:
          apiName: {
            description: 'The API name of the field powering this component ',
            type: string
          }
    FieldLayoutComponentRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractRecordLayoutComponentRepresentation'
      }
      - type: object
        description: Field record layout component.
        properties:
          label: {
            description: Label,
            type: string
          }
    FieldRepresentation:
      type: object
      description: Field metadata.
      properties:
        apiName: {
          description: The API name for this field.,
          type: string
        }
        calculated: {
          description: 'Indicates whether the field is a custom formula field (?).',
          type: boolean
        }
        compound: {
          description: 'Indicates whether the field is a top level compound field
            (or in the case of switchable_personname, might be a compound field).
            This is calculated based on whether other accessible fields in the object
            refer to this field as their compoundFieldName. This value will typically
            be false for LOCATION, because of the odd way locations are handled in
            describes.',
          type: boolean
        }
        compoundComponentName: {
          description: 'When this field is a component of a compound field, this is
            the normalized component name otherwise this will be null. For example,
            this will return "Street" if the field represents "BillingStreet" of an
            Address compound field.',
          type: string
        }
        compoundFieldName: {
          description: 'When this field is an individual component field of a compound
            field, this indicates which field is the top level compound field. This
            will be null when the field does not represent a component field of a
            compound field.',
          type: string
        }
        controllerName: {
          description: The name of the field that controls the values of this picklist.,
          type: string
        }
        controllingFields:
          description: 'A list of fields that the current field depends on. '
          type: array
          items: {
            type: string
          }
        createable: {
          description: Indicates whether the field can be created.,
          type: boolean
        }
        custom: {
          description: Indicates whether the field is custom.,
          type: boolean
        }
        dataType:
          description: 'Field data type. Available values: Address, Base64, Boolean, ComboBox, ComplexValue, Currency, Date, DateTime, Double, Email, EncryptedString, Int, Location, Long, MultiPicklist, Percent, Phone,Picklist, Reference, String, TextArea, Time,Url'
          type: string
          enum: [
            Address,
            Base64,
            Boolean,
            ComboBox,
            ComplexValue,
            Currency,
            Date,
            DateTime,
            Double,
            Email,
            EncryptedString,
            Int,
            Location,
            Long,
            MultiPicklist,
            Percent,
            Phone,
            Picklist,
            Reference,
            String,
            TextArea,
            Time,
            Url]

        extraTypeInfo:
          description: 'Additional data type information. Available values: ExternalLookup, ImageUrl, IndirectLookup, PersonName, PlainTextArea, RichTextArea, SwitchablePersonName'
          type: string
          enum: [
            ExternalLookup,
            ImageUrl,
            IndirectLookup,
            PersonName,
            PlainTextArea,
            RichTextArea,
            SwitchablePersonName]

        filterable: {
          description: 'Indicates whether the field is filterable. If true, then this
            field can be specified in the WHERE clause of a SOQL statement.',
          type: boolean
        }
        filteredLookupInfo: {
          $ref: '#/components/schemas/FilteredLookupInfoRepresentation'
        }
        highScaleNumber: {
          description: Indicates whether the field stores numbers to 8 decimal places regardless of what's specified in the field details.,
          type: boolean
        }
        htmlFormatted: {
          description: Indicates whether the field has been formatted for HTML and should be encoded for display in HTML. Also indicates whether a field is a custom formula field that has an IMAGE text function.,
          type: boolean
        }
        inlineHelpText: {
          description: The text that displays in the field-level help hover text for this field.,
          type: string
        }
        label: {
          description: Text label that is displayed next to the field in the Salesforce user interface. This label may be localized.,
          type: string
        }
        length: {
          description: 'For string fields, the maximum size of the field in number
            of Unicode characters (not bytes).',
          type: integer
        }
        nameField: {
          description: Indicates whether the field is a name field.,
          type: boolean
        }
        polymorphicForeignKey: {
          description: Indicates whether the field is a foreign key over a domain of multiple entities.,
          type: boolean
        }
        precision: {
          description: 'For double fields, indicates the maximum number of digits
            that can be stored, on both sides of the decimal point.',
          type: integer
        }
        reference: {
          description: Indicates whether the field is a foreign key reference to another record.,
          type: boolean
        }
        referenceTargetField: {
          description: 'For indirect lookup relationships on external objects, the
            target custom field of the referenced object.',
          type: string
        }
        referenceToInfos:
          description: For fields that refer to other objects, this list includes information about the object types and name fields of the referenced objects.
          type: array
          items: {
            $ref: '#/components/schemas/ReferenceToInfoRepresentation'
          }
        relationshipName: {
          description: 'The name of the relationship, if this is a master-detail relationship
            field.',
          type: string
        }
        required: {
          description: Indicates whether the field is required on create or update.,
          type: boolean
        }
        scale: {
          description: 'For double fields, indicates the number of digits to the right
            of the decimal point.',
          type: integer
        }
        searchPrefilterable: {
          description: Indicates whether a foreign key can be included in prefiltering (true) or not (false) when used in a SOSL WHERE clause. Prefiltering means to filter by a specific field value before executing the full search query.,
          type: boolean
        }
        sortable: {
          description: Indicates whether a query can sort on this field.,
          type: boolean
        }
        unique: {
          description: Determines if a field is unique or not.,
          type: boolean
        }
        updateable: {
          description: Indicates whether the field can be updated.,
          type: boolean
        }
    FieldValueRepresentation:
      type: object
      description: Contains both the raw and displayable field values for a field in a Record.
      properties:
        displayValue: {
          description: 'The displayable value for a field. For a date, this will be
            a value familiar to users rather than an ISO 8601 formatted date value,
            which is what the raw value would be. Similarly, currency values will
            also have a formatted display value. For data that can be localized to
            the context user''s language using the toLabel() function, that value
            will also be displayed here.',
          type: string
        }
        value: {
          description: The value of a field in its raw data form.,
          type: object
        }
    FilteredLookupInfoRepresentation:
      type: object
      description: Filtered lookup info.
      properties:
        controllingFields:
          description: Controlling fields when the lookup filter is dependent on the source object.
          type: array
          items: {
            type: string
          }
        dependent: {
          description: Indicates whether the lookup filter is dependent on the source object.,
          type: boolean
        }
        optionalFilter: {
          description: Indicates whether the lookup filter is optional.,
          type: boolean
        }
    FormItemRepresentation:
      type: object
      description: Form item
      properties:
        formSubitems:
          description: Subitems that make up the item.
          type: array
          items: {
            $ref: '#/components/schemas/AbstractFormSubitemRepresentation'
          }
        label: {
          description: Text label for the item.,
          type: string
        }
    FormRepresentation:
      type: object
      description: Form.
      properties:
        apiName: {
          description: Form developer name.,
          type: string
        }
        label: {
          description: Form label.,
          type: string
        }
        sections:
          description: Form sections.
          type: array
          items: {
            $ref: '#/components/schemas/FormSectionRepresentation'
          }
    FormRowRepresentation:
      type: object
      description: Form row.
      properties:
        formItems:
          description: The items in this row, from left to right. Might not extend to the last column.
          type: array
          items: {
            $ref: '#/components/schemas/FormItemRepresentation'
          }
    FormSectionRepresentation:
      type: object
      description: Form section.
      properties:
        apiName: {
          description: Form section developer name.,
          type: string
        }
        columns: {
          description: Number of columns in the section.,
          type: integer
        }
        formSectionRows:
          description: The rows in the section.
          type: array
          items: {
            $ref: '#/components/schemas/FormRowRepresentation'
          }
        label: {
          description: Form section label.,
          type: string
        }
    LeadStatusPicklistValueAttributesRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractPicklistValueAttributesRepresentation'
      }
      - type: object
        description: Additional picklist value attributes for lead statuses.
        properties:
          converted: {
            description: 'True if this status indicates the lead has been converted,
              otherwise false. For more info, see the doc for the LeadStatus standard
              object.',
            type: boolean
          }
    ListColumnRepresentation:
      type: object
      description: ListColumnRepresentation
      properties:
        fieldApiName: {
          description: API name for the field.,
          type: string
        }
        label: {
          description: Label of the field.,
          type: string
        }
        sortable: {
          description: Whether the list column is sortable.,
          type: boolean
        }
    ListFilterByInfoRepresentation:
      type: object
      description: ListFilterByInfoRepresentation
      properties:
        fieldApiName: {
          description: API name for the field used to filter.,
          type: string
        }
        label: {
          description: Label for the field used to filter.,
          type: string
        }
        operandLabels:
          description: The values (or label if there is one) to filter by.
          type: array
          items: {
            type: string
          }
        operator:
          description: 'Operator such as equals, starts with. Available values: Contains, Equals, Excludes, GreaterOrEqual, GreaterThan, Includes, LessOrEqual, LessThan, NotContain, NotEqual, StartsWith, Within'
          type: string
          enum: [
            Contains,
            Equals,
            Excludes,
            GreaterOrEqual,
            GreaterThan,
            Includes,
            LessOrEqual,
            LessThan,
            NotContain,
            NotEqual,
            StartsWith,
            Within]

    ListInfoRepresentation:
      type: object
      description: ListInfoRepresentation
      properties:
        cloneable: {
          description: Indicates whether the listview can be cloned.,
          type: boolean
        }
        createable: {
          description: Indicates whether a new listview for this listview's SObject can be created.,
          type: boolean
        }
        deletable: {
          description: Indicates whether the listview can be deleted.,
          type: boolean
        }
        displayColumns:
          description: All display columns for this list view.
          type: array
          items: {
            $ref: '#/components/schemas/ListColumnRepresentation'
          }
        filterLogicString: {
          description: This is the filter logic such as "(1 OR 2) and 3".  Indexes are 1-based.,
          type: string
        }
        filteredByInfo:
          description: Describes how the list view is filtered.
          type: array
          items: {
            $ref: '#/components/schemas/ListFilterByInfoRepresentation'
          }
        label: {
          description: The list view's display label.  E.g. "All Accounts".,
          type: string
        }
        listReference: {
          $ref: '#/components/schemas/ListReferenceRepresentation'
        }
        orderedByInfo:
          description: Describes how records are ordered in this list view.
          type: array
          items: {
            $ref: '#/components/schemas/ListOrderByInfoRepresentation'
          }
        updateable: {
          description: Indicates whether the listview can be updated.,
          type: boolean
        }
        userPreferences: {
          $ref: '#/components/schemas/ListUserPreferenceRepresentation'
        }
        visibility:
          description: 'The list view's visibility. Available values: Private, Public, Shared'
          type: string
          enum: [
            Private,
            Public,
            Shared]

        visibilityEditable: {
          description: Indicates whether the visibility of the listview can be edited.,
          type: boolean
        }
    ListOrderByInfoRepresentation:
      type: object
      description: ListOrderByInfoRepresentation
      properties:
        fieldApiName: {
          description: API name for the field.,
          type: string
        }
        isAscending: {
          description: Whether the list column is ascending or descending.,
          type: boolean
        }
        label: {
          description: Localized label of the field.,
          type: string
        }
    ListRecordCollectionRepresentation:
      type: object
      description: ListRecordCollectionRepresentation
      properties:
        count: {
          description: The total count of records returned.,
          type: integer
        }
        currentPageToken: {
          description: The token for the current page of records.,
          type: string
        }
        currentPageUrl: {
          description: The URL of the current page of records.,
          type: string
        }
        listInfoETag: {
          description: ListInfo ETag.,
          type: string
        }
        nextPageToken: {
          description: The token for the next page of records.,
          type: string
        }
        nextPageUrl: {
          description: The URL of the next page of records,
          type: string
        }
        previousPageToken: {
          description: The token for the previous page of records.,
          type: string
        }
        previousPageUrl: {
          description: The URL of the previous page of records.,
          type: string
        }
        records:
          description: List data.
          type: array
          items: {
            $ref: '#/components/schemas/RecordRepresentation'
          }
    ListRecordCollectionRepresentation212:
      type: object
      description: ListRecordCollectionRepresentation212
      properties: {
        }
    ListReferenceRepresentation:
      type: object
      description: ListReferenceRepresentation
      properties:
        id: {
          description: List view id.,
          type: string
        }
        listViewApiName: {
          description: The list view's api name.  E.g. "AllAccounts".,
          type: string
        }
        objectApiName: {
          description: Entity API name for list view.,
          type: string
        }
        type: {
          description: Type of the list view.,
          type: string
        }
    ListUiRepresentation:
      type: object
      description: ListUiRepresentation
      properties:
        info: {
          $ref: '#/components/schemas/ListInfoRepresentation'
        }
        records: {
          $ref: '#/components/schemas/ListRecordCollectionRepresentation'
        }
    ListUiRepresentation212:
      type: object
      description: ListUiRepresentation212
      properties: {
        }
    ListUserPreferenceRepresentation:
      type: object
      description: ListUserPreferenceRepresentation
      properties:
        columnWidths:
          description: Column width preferences for the list view.
          type: object
          additionalProperties: {
            type: integer
          }
        columnWrap:
          description: Column wrapping preferences for the list view.
          type: object
          additionalProperties: {
            type: boolean
          }
    ListViewSummaryCollectionRepresentation:
      type: object
      description: ListView Summary Collection Representation
      properties:
        count: {
          description: The total count of list views returned.,
          type: integer
        }
        currentPageToken: {
          description: The pageToken of the current page of list views.,
          type: string
        }
        currentPageUrl: {
          description: The URL of the current page of list views.,
          type: string
        }
        lists:
          description: Collection  of ListViewSummaryRepresentations
          type: array
          items: {
            $ref: '#/components/schemas/ListViewSummaryRepresentation'
          }
        nextPageToken: {
          description: The pageToken of the next page of list views.,
          type: string
        }
        nextPageUrl: {
          description: The URL of the next page of list views,
          type: string
        }
        previousPageToken: {
          description: The pageToken of the previous page of list views.,
          type: string
        }
        previousPageUrl: {
          description: The URL of the previous page of list views.,
          type: string
        }
    ListViewSummaryRepresentation:
      type: object
      description: List View Summary Representation
      properties:
        apiName: {
          description: The list view's object API name.,
          type: string
        }
        id: {
          description: Id of the list view.,
          type: string
        }
        label: {
          description: List view's label.,
          type: string
        }
        listUiUrl: {
          description: List view ui url.,
          type: string
        }
    LocationFieldRepresentation:
      type: object
      description: Represents a record field's complex location value.
      properties:
        latitude: {
          description: Gets the latitude of the location. This value maybe null if both latitude and longitude are null.,
          type: number,
          format: double
        }
        longitude: {
          description: Gets the longitude of the location. This value maybe null if both latitude and longitude are null.,
          type: number,
          format: double
        }
    LookupValuesRepresentation:
      type: object
      description: Search results for a given lookup field, organized by type.
      properties:
        lookupResults:
          description: Search results for a given lookup field, organized by type.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/RecordCollectionRepresentation'
          }
    MatchRepresentation:
      type: object
      description: 'Representation of group of possible matches '
      properties:
        duplicateResultInfos:
          description: Map of duplicate rule name to DuplicateResultInfo.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/DuplicateResultInfoRepresentation'
          }
        objectApiName: {
          description: The object's API name.,
          type: string
        }
        recordIds:
          description: List of RecordId's with matching rule.
          type: array
          items: {
            type: string
          }
    MatchResultInfoRepresentation:
      type: object
      description: Match Result Info
      properties:
        recordIds:
          description: List of recordIds matched.
          type: array
          items: {
            type: string
          }
        rule: {
          description: Name of Match rule.,
          type: string
        }
    MatchResultRepresentation:
      type: object
      description: Duplicate rule match.
      properties:
        apiName: {
          description: Object API name.,
          type: string
        }
        isAllowSave: {
          description: Indicates whether the duplicate rule will allow a duplicate to be saved.,
          type: boolean
        }
        matchRecordIds:
          description: IDs of the matching records.
          type: array
          items: {
            type: string
          }
        matchRule: {
          description: The developer name of the matching duplicate rule.,
          type: string
        }
        objectLabel: {
          description: Object label.,
          type: string
        }
        objectLabelPlural: {
          description: Object plural label.,
          type: string
        }
        themeInfo: {
          $ref: '#/components/schemas/ThemeInfoRepresentation'
        }
    MatchRuleRepresentation:
      type: object
      description: 'Match Rule for dedupe configuration '
      properties:
        matchEngine: {
          description: Name of Matching Engine.,
          type: string
        }
        matchFields:
          description: Fields used for current MatchRule.
          type: array
          items: {
            type: string
          }
        name: {
          description: Name of the current MatchRule.,
          type: string
        }
        objectApiName: {
          description: Entity Type of Match Rule.,
          type: string
        }
    NavItemRepresentation:
      type: object
      description: Metadata for a navitem (tab)
      properties:
        availableInClassic: {
          description: Is this tab available for salesforce classic,
          type: boolean
        }
        availableInLightning: {
          description: Is this tab available for lightning,
          type: boolean
        }
        color: {
          description: Tab color of the tab,
          type: string
        }
        content: {
          description: Launch url for this tab,
          type: string
        }
        custom: {
          description: Boolean specifying if this tab is a custom tab,
          type: boolean
        }
        developerName: {
          description: Developer name of the tab,
          type: string
        }
        iconUrl: {
          description: URL for the tab icon,
          type: string
        }
        id: {
          description: ID of the nav item,
          type: string
        }
        itemType: {
          description: Nav menu item type,
          type: string
        }
        label: {
          description: Label of the tab,
          type: string
        }
        objectApiName: {
          description: Api name of the object corresponding to this tab,
          type: string
        }
        objectLabel: {
          description: 'The label of the associated object, if applicable.',
          type: string
        }
        objectLabelPlural: {
          description: 'The plural label of the associated object, if applicable.',
          type: string
        }
        pageReference: {
          $ref: '#/components/schemas/PageReferenceRepresentation'
        }
        standardType: {
          description: Standard type,
          type: string
        }
    NavItemsRepresentation:
      type: object
      description: An ordered lists of nav items.
      properties:
        currentPageUrl: {
          description: URL to the current page of nav items.,
          type: string
        }
        navItems:
          description: An ordered list of nav items.
          type: array
          items: {
            $ref: '#/components/schemas/NavItemRepresentation'
          }
        nextPageUrl: {
          description: URL to the next page of of nav items.,
          type: string
        }
    ObjectInfoDirectoryEntryRepresentation:
      type: object
      description: Entry for an object info within the directory of objects.
      properties:
        apiName: {
          description: The API name of the object info corresponding to this entry.,
          type: string
        }
        label: {
          description: The label of the object info corresponding to this entry.,
          type: string
        }
        labelPlural: {
          description: The plural label of the object info corresponding to this entry.,
          type: string
        }
        objectInfoUrl: {
          description: The URL to retrieve the full object info corresponding to this entry.,
          type: string
        }
    ObjectInfoDirectoryRepresentation:
      type: object
      description: Directory of objects that can be used within UI API end-points.
      properties:
        objects:
          description: The object info entries corresponding to the objects that can be used within UI API.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/ObjectInfoDirectoryEntryRepresentation'
          }
    ObjectInfoRepresentation:
      type: object
      description: Object metadata.
      properties:
        apiName: {
          description: The object API name.,
          type: string
        }
        childRelationships:
          description: Child relationships for the object.
          type: array
          items: {
            $ref: '#/components/schemas/ChildRelationshipRepresentation'
          }
        createable: {
          description: Indicates whether the object can be created.,
          type: boolean
        }
        custom: {
          description: Indicates whether the object is custom.,
          type: boolean
        }
        defaultRecordTypeId: {
          description: 'The ID for the default record type for this object, if any.
            Null if there is none, or only a master type.',
          type: string
        }
        deletable: {
          description: Indicates whether the object can be deleted.,
          type: boolean
        }
        dependentFields:
          description: This is a nested map of field and its dependents. Fields that neither have any controllers nor dependents are not a part of this map
          type: object
          additionalProperties: {
            type: object
          }
        feedEnabled: {
          description: Indicates whether the object may have feeds.,
          type: boolean
        }
        fields:
          description: A map of field API name to information about the field. This map only contains fields relevant to the requested layout and mode.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/FieldRepresentation'
          }
        keyPrefix: {
          description: The key prefix for IDs of this object.,
          type: string
        }
        label: {
          description: The object display label.,
          type: string
        }
        labelPlural: {
          description: The plural form of the object display label.,
          type: string
        }
        layoutable: {
          description: Indicates whether the object can have a layout.,
          type: boolean
        }
        mruEnabled: {
          description: Indicates whether the object may appear in Most Recently Used lists.,
          type: boolean
        }
        nameFields:
          description: List of the API names of the fields used to identify the name field for standard and custom objects. Typically there is one name field per object, except where FirstName and LastName fields are used.
          type: array
          items: {
            type: string
          }
        queryable: {
          description: Indicates whether the object can be queried by the context user.,
          type: boolean
        }
        recordTypeInfos:
          description: A map of record type IDs to information about the record type. The user need not have access to all the returned record types to see them here.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/RecordTypeInfoRepresentation'
          }
        searchable: {
          description: Indicates whether the object can be searched.,
          type: boolean
        }
        themeInfo: {
          $ref: '#/components/schemas/ThemeInfoRepresentation'
        }
        updateable: {
          description: Indicates whether the object can be updated.,
          type: boolean
        }
    OperationInputRepresentation:
      type: object
      description: An operation that can to be executed within aggregate
      properties:
        httpHeaders:
          description: The HTTP headers of the operation to be executed
          type: object
          additionalProperties: {
            type: string
          }
        referenceId: {
          description: The ID of the operation that can be used in references,
          type: string
        }
        url: {
          description: The URL of the operation to executed,
          type: string
        }
    OperationResponseRepresentation:
      type: object
      description: The output of an operation execution within aggregate.
      properties:
        body: {
          description: The body of the operation,
          type: object
        }
        httpHeaders:
          description: The HTTP headers of the operation
          type: object
          additionalProperties: {
            type: string
          }
        httpStatusCode: {
          description: The HTTP status code of the operation,
          type: integer
        }
        referenceId: {
          description: The ID that was given for the operation,
          type: string
        }
    OpportunityStagePicklistValueAttributesRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractPicklistValueAttributesRepresentation'
      }
      - type: object
        description: Additional picklist value attributes for opportunity stages.
        properties:
          closed: {
            description: 'Indicates whether this opportunity stage value represents
              a closed opportunity. Multiple opportunity stage values can represent
              a closed opportunity. For more info, see the doc for the OpportunityStage
              standard object.',
            type: boolean
          }
          defaultProbability: {
            description: 'The default percentage estimate of the confidence in closing
              a specific opportunity for this opportunity stage value. May be null
              if forecasting is not enabled for the org. For more info, see the doc
              for the OpportunityStage standard object.',
            type: number,
            format: double
          }
          forecastCategoryName: {
            description: 'The default forecast category value for this opportunity
              stage value. May be null if forecasting is not enabled for the org.
              For more info, see the doc for the OpportunityStage standard object.',
            type: string
          }
          won: {
            description: 'Indicates whether this opportunity stage value represents
              a won opportunity. Multiple opportunity stage values can represent a
              won opportunity. For more info, see the doc for the OpportunityStage
              standard object.',
            type: boolean
          }
    PageReferenceRepresentation:
      type: object
      description: A page reference.
      properties:
        attributes:
          description: Values for each attribute specified by the PageDefinition.
          type: object
          additionalProperties: {
            type: object
          }
        state:
          description: Optional additional parameters that are not integral to the resolution of the reference.
          type: object
          additionalProperties: {
            type: object
          }
        type: {
          description: API name of the corresponding PageDefinition.,
          type: string
        }
    PhotoRecordAvatarRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractRecordAvatarRepresentation'
      }
      - type: object
        description: Represents an avatar associated to a Record
        properties:
          backgroundColor: {
            description: 'Retrieve the background color for the photo, if known, otherwise
              this will be null.',
            type: string
          }
          height: {
            description: 'Retrieve the height of the photo in pixels, if known, otherwise
              this will be null.',
            type: integer,
            format: int64
          }
          photoUrl: {
            description: Retrieve the URL location of the photo.,
            type: string
          }
          width: {
            description: 'Retrieve the width of the photo in pixels, if known, otherwise
              this will be null.',
            type: integer,
            format: int64
          }
    PicklistValueRepresentation:
      type: object
      description: A single picklist value.
      properties:
        attributes: {
          $ref: '#/components/schemas/AbstractPicklistValueAttributesRepresentation'
        }
        label: {
          description: The displayable value of the picklist to use in a UI.,
          type: string
        }
        validFor:
          description: If this picklist is a dependent picklist, this will be the controlling value indexes for which this value is valid. If this is an independent picklist, this list will be empty.
          type: array
          items: {
            type: integer
          }
        value: {
          description: The value of the picklist to use in the API.,
          type: string
        }
    PicklistValuesCollectionRepresentation:
      type: object
      description: Picklist values for multiple picklist fields and scoped to a record type.
      properties:
        picklistFieldValues:
          description: This contains a map of fieldName to PicklistValuesRepresentation for all picklist fields. There would be no entry for non picklistFields in this map
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/PicklistValuesRepresentation'
          }
    PicklistValuesRepresentation:
      type: object
      description: Picklist values for a field and scoped to a record type.
      properties:
        controllerValues:
          description: |-
            If a picklist is an independent picklist, this map will be empty. If it is a dependent picklist, then this map will contain the following:
            Controlling field is a picklist:
            Picklist value -> value index
            Controlling field is a boolean:
            If the controlling field is a boolean, then 0 will indicate false and 1 will indicate true. Values in the map will be:
            "false": 0
            "true": 1.
          type: object
          additionalProperties: {
            type: integer
          }
        defaultValue: {
          $ref: '#/components/schemas/PicklistValueRepresentation'
        }
        url: {
          description: A self-reference URL back to the API that can be used to retrieve this payload.,
          type: string
        }
        values:
          description: A list of the applicable values for this object-record-type-field combination.
          type: array
          items: {
            $ref: '#/components/schemas/PicklistValueRepresentation'
          }
    PlatformActionRepresentation:
      type: object
      description: Record.
      properties:
        actionListContext: {
          description: PlatformActionContextEnum,
          type: string
        }
        actionTarget: {
          description: 'The URL to invoke or describe the action when the action is
            invoked. If the action is a standard button overridden by a Visualforce
            page, the ActionTarget returns the URL of the Visualforce page, such as
            /apex/pagename.',
          type: string
        }
        actionTargetType: {
          description: 'The type of the target when this action is triggered. Valid
            values are:Describe -- applies to actions with a user interface, such
            as quick actionsInvoke -- applies to actions with no user interface, such
            as action links or invocable actionsVisualforce -- applies to standard
            buttons overridden by a Visualforce page',
          type: string
        }
        apiName: {
          description: The action's object API name.,
          type: string
        }
        externalId: {
          description: 'The external Id contains the action assoicated info. For Quick
            Action, the format is: OrgId:SourceObject::Context:deviceFormat::QuickActionDefinitionId,
            i.e.:00Dxx0000001gGh:x01xx0000000007AAA::Record:Phone:09Dxx00000000B6For
            Standard Action,OrgId:SourceObject::Context:deviceFormat::StandardButton:ApiName',
          type: string
        }
        iconUrl: {
          description: The URL of the action’s icon image.,
          type: string
        }
        id: {
          description: The ID of this Platform Action Record.,
          type: string
        }
        isMassAction: {
          description: Whether the action is massAction.,
          type: string
        }
        label: {
          description: The label of the action.,
          type: string
        }
        primaryColor: {
          description: 'Hex Color Code, such as 7F8DE1',
          type: string
        }
        relatedListRecordId: {
          description: Represents the ID of a record in an object’s related list.,
          type: string
        }
        relatedSourceObject: {
          description: 'When the ActionListContext is RelatedList or RelatedListRecord,
            this field represents the API name of the related list to which the action
            belongs.',
          type: string
        }
        section: {
          description: 'Which section the action appears in a page. The value can
            be: Page, ActivityComposer, CollaborateComposer, SingleActionLinks',
          type: string
        }
        sourceObject: {
          description: 'The object the action belongs to, either EntityApiName or
            recordId depending on the endpoints.',
          type: string
        }
        subtype: {
          description: 'The subtype of the action. For quick actions, the subtype
            is QuickActionType Enum value. For custom buttons, the subtype is WebLinkTypeEnum.
            For action links, subtypes are Api, ApiAsync, Download, and Ui. Standard
            buttons and productivity actions have no subtype.',
          type: string
        }
        targetObject: {
          description: Target Object for the action,
          type: string
        }
        targetUrl: {
          description: Target URL for Custom Button Actions,
          type: string
        }
        type: {
          description: The type of the action defined in PlatformActionTypeEnum,
          type: string
        }
    RecordCollectionRepresentation:
      type: object
      description: Record Collection Representation.
      properties:
        count: {
          description: The total count of records returned.,
          type: integer
        }
        currentPageToken: {
          description: The token of the current page of records.,
          type: string
        }
        currentPageUrl: {
          description: The URL of the current page of records.,
          type: string
        }
        nextPageToken: {
          description: The token of the next page of records.,
          type: string
        }
        nextPageUrl: {
          description: The URL of the next page of records,
          type: string
        }
        previousPageToken: {
          description: The token of the previous page of records.,
          type: string
        }
        previousPageUrl: {
          description: The URL of the previous page of records.,
          type: string
        }
        records:
          description: Collection  of RecordRepresentations which the relation resolves to
          type: array
          items: {
            $ref: '#/components/schemas/RecordRepresentation'
          }
    RecordDefaultsRepresentation:
      type: object
      description: Record defaults.
      properties:
        layout: {
          $ref: '#/components/schemas/RecordLayoutRepresentation'
        }
        objectInfos:
          description: Object metadata.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/ObjectInfoRepresentation'
          }
        record: {
          $ref: '#/components/schemas/RecordRepresentation'
        }
    RecordExceptionErrorRepresentation:
      type: object
      description: Record exception error.
      properties:
        constituentField: {
          description: Constituent field API name. May be null if no field applies. Usually matches field name but for compound fields will be the constituent field name.,
          type: string
        }
        duplicateRecordError: {
          $ref: '#/components/schemas/DuplicateRecordErrorRepresentation'
        }
        errorCode: {
          description: Error status code.,
          type: string
        }
        field: {
          description: Field API name. May be null if no field applies.,
          type: string
        }
        fieldLabel: {
          description: Field label. May be null if no field applies.,
          type: string
        }
        message: {
          description: Error message.,
          type: string
        }
    RecordExceptionRepresentation:
      type: object
      description: Record exception.
      properties:
        errors:
          description: General errors.
          type: array
          items: {
            $ref: '#/components/schemas/RecordExceptionErrorRepresentation'
          }
        fieldErrors:
          description: Field-specific errors.
          type: object
          additionalProperties:
            type: array
            items: {
              $ref: '#/components/schemas/RecordExceptionErrorRepresentation'
            }
    RecordInputRepresentation:
      type: object
      description: Description of a record input.
      properties:
        allowSaveOnDuplicate: {
          description: Set allowSaveOnDuplicate param,
          type: boolean
        }
        apiName: {
          description: Object API name.,
          type: string
        }
        fields:
          description: Field values. When this representation is deserialized from JSON, the values will be typed as JsonNode, delaying full deserialization until the resource executes, which knows the expected data types. In the case of invocation through CiJ directly, the field values should be typed as the expected data types.
          type: object
          additionalProperties: {
            type: object
          }
    RecordLayoutComponentRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractRecordLayoutComponentRepresentation'
      }
      - type: object
        description: Concrete record layout component.
        properties: {
          }
    RecordLayoutItemRepresentation:
      type: object
      description: Record layout item.
      properties:
        editableForNew: {
          description: Indicates whether the item may be edited on create.,
          type: boolean
        }
        editableForUpdate: {
          description: Indicates whether the item may be edited on update.,
          type: boolean
        }
        label: {
          description: Text label for the item.,
          type: string
        }
        layoutComponents:
          description: Components that make up the item.
          type: array
          items: {
            $ref: '#/components/schemas/AbstractRecordLayoutComponentRepresentation'
          }
        lookupIdApiName: {
          description: TODO,
          type: string
        }
        required: {
          description: Indicates whether field is required in Layout,
          type: boolean
        }
        sortable: {
          description: Indicates whether the item is sortable.,
          type: boolean
        }
    RecordLayoutRepresentation:
      type: object
      description: Record layout.
      properties:
        id: {
          description: Layout ID.,
          type: string
        }
        layoutType:
          description: 'Layout type. Available values: Compact, Full'
          type: string
          enum: [
            Compact,
            Full]

        mode:
          description: 'Mode. Available values: Create, Edit, View'
          type: string
          enum: [
            Create,
            Edit,
            View]

        sections:
          description: Layout sections.
          type: array
          items: {
            $ref: '#/components/schemas/RecordLayoutSectionRepresentation'
          }
    RecordLayoutRowRepresentation:
      type: object
      description: Record layout row.
      properties:
        layoutItems:
          description: The items in this row, from left to right. Might not extend to the last column.
          type: array
          items: {
            $ref: '#/components/schemas/RecordLayoutItemRepresentation'
          }
    RecordLayoutSectionRepresentation:
      type: object
      description: Record layout section.
      properties:
        collapsible: {
          description: Indicates whether the section may be collapsed.,
          type: boolean
        }
        columns: {
          description: Number of columns in the section.,
          type: integer
        }
        heading: {
          description: Heading text for the section.,
          type: string
        }
        id: {
          description: Section ID.,
          type: string
        }
        layoutRows:
          description: The rows in the section.
          type: array
          items: {
            $ref: '#/components/schemas/RecordLayoutRowRepresentation'
          }
        rows: {
          description: Number of rows in the section.,
          type: integer
        }
        useHeading: {
          description: Indicates whether the heading text is expected to be displayed.,
          type: boolean
        }
    RecordLayoutSectionUserStateInputRepresentation:
      type: object
      description: Represents the user state for a record layout section.
      properties:
        collapsed: {
          description: Indicates whether the section is collapsed.,
          type: boolean
        }
    RecordLayoutSectionUserStateRepresentation:
      type: object
      description: Record layout section user state.
      properties:
        collapsed: {
          description: Indicates whether the section should initially be displayed as collapsed.,
          type: boolean
        }
        id: {
          description: Section ID.,
          type: string
        }
    RecordLayoutUserStateInputRepresentation:
      type: object
      description: Represents the user state for a record layout.
      properties:
        sectionUserStates:
          description: Indicates section user states to set. Keyed by section ID.
          type: object
          additionalProperties: {
            type: object
          }
    RecordLayoutUserStateRepresentation:
      type: object
      description: Record layout user state.
      properties:
        id: {
          description: Layout ID.,
          type: string
        }
        sectionUserStates:
          description: Section user states, keyed on section ID.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/RecordLayoutSectionUserStateRepresentation'
          }
    RecordRepresentation:
      type: object
      description: Record.
      properties:
        apiName: {
          description: The record's object API name.,
          type: string
        }
        childRelationships:
          description: The child relationship data for this record
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/RecordCollectionRepresentation'
          }
        fields:
          description: The field data for this record, matching the requested layout and mode.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/FieldValueRepresentation'
          }
        id: {
          description: The ID of this record.,
          type: string
        }
        lastModifiedById: {
          description: The lastModifiedById of the record.,
          type: string
        }
        lastModifiedDate: {
          description: The lastModifiedDate of the record.,
          type: string
        }
        recordTypeInfo: {
          $ref: '#/components/schemas/RecordTypeInfoRepresentation'
        }
        systemModstamp: {
          description: The systemModstamp of the record.,
          type: string
        }
    RecordTypeInfoRepresentation:
      type: object
      description: Record type.
      properties:
        available: {
          description: Indicates whether this record type is available to the context user when creating a new record.,
          type: boolean
        }
        defaultRecordTypeMapping: {
          description: Indicates whether this is the default record type mapping for the associated object.,
          type: boolean
        }
        master: {
          description: Whether this is the master record type. The master record type is the default record type that’s used when a record has no custom record type associated with it.,
          type: boolean
        }
        name: {
          description: The record's object API name.,
          type: string
        }
        recordTypeId: {
          description: The ID of this record type.,
          type: string
        }
    RecordUiRepresentation:
      type: object
      description: Record ui.
      properties:
        layoutUserStates:
          description: Map of layout ID -> user state.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/RecordLayoutUserStateRepresentation'
          }
        layouts:
          description: Record layout.
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: object
              additionalProperties:
                type: object
                additionalProperties: {
                  $ref: '#/components/schemas/RecordLayoutRepresentation'
                }
        objectInfos:
          description: Object metadata.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/ObjectInfoRepresentation'
          }
        records:
          description: Record data.
          type: object
          additionalProperties: {
            $ref: '#/components/schemas/RecordRepresentation'
          }
    ReferenceToInfoRepresentation:
      type: object
      description: Information about a reference field's referenced types and the name field names of those types.
      properties:
        apiName: {
          description: The object API name of a type being referenced in a relationship.,
          type: string
        }
        nameFields:
          description: The names of the name fields for this object type. Combined with the relationship name, you can determine how to query this type's name fields, e.g. Parent.Name. Typically there is one name field per object, except where FirstName and LastName fields are used.
          type: array
          items: {
            type: string
          }
    ReportLayoutComponentRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractRecordLayoutComponentRepresentation'
      }
      - type: object
        description: Report record layout component.
        properties:
          cacheData: {
            description: Cache data,
            type: boolean
          }
          error: {
            description: Error,
            type: string
          }
          filter: {
            description: Filter,
            type: string
          }
          hideOnError: {
            description: Hide on error,
            type: boolean
          }
          placeholder: {
            description: Placeholder,
            type: string
          }
          reportId: {
            description: Report ID,
            type: string
          }
          showTitle: {
            description: Show title,
            type: boolean
          }
          size: {
            description: Size,
            type: string
          }
    ThemeBannerRepresentation:
      type: object
      description: A representation of a theme banner image.
      properties:
        fullSizeUrl: {
          description: The url of the banner image,
          type: string
        }
    ThemeImageRepresentation:
      type: object
      description: A representation of a theme image.
      properties:
        largeUrl: {
          description: The url of the large image.,
          type: string
        }
        mediumUrl: {
          description: The url of the medium image.,
          type: string
        }
        smallUrl: {
          description: The url of the small image.,
          type: string
        }
    ThemeInfoRepresentation:
      type: object
      description: Theme info.
      properties:
        color: {
          description: Color.,
          type: string
        }
        iconUrl: {
          description: Icon URL.,
          type: string
        }
    ThemeRecordAvatarRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractRecordAvatarRepresentation'
      }
      - type: object
        description: Represents an avatar associated to a Record
        properties:
          backgroundColor: {
            description: Retrieve the background color for the theme as a six-letter hexidecimal value.,
            type: string
          }
          iconUrl: {
            description: The URL of the image for the icon.,
            type: string
          }
    ThemeRepresentation:
      type: object
      description: A representation of a theme.
      properties:
        brandColor: {
          description: Brand color of the theme.,
          type: string
        }
        brandImage: {
          $ref: '#/components/schemas/ThemeImageRepresentation'
        }
        defaultGroupBanner: {
          $ref: '#/components/schemas/ThemeBannerRepresentation'
        }
        defaultGroupImage: {
          $ref: '#/components/schemas/ThemeImageRepresentation'
        }
        defaultPageBanner: {
          $ref: '#/components/schemas/ThemeBannerRepresentation'
        }
        defaultUserBanner: {
          $ref: '#/components/schemas/ThemeBannerRepresentation'
        }
        defaultUserImage: {
          $ref: '#/components/schemas/ThemeImageRepresentation'
        }
        density:
          description: 'Current Density settings. Available values: ViewOne, ViewThree, ViewTwo'
          type: string
          enum: [
            ViewOne,
            ViewThree,
            ViewTwo]

        headerColor: {
          description: Header color of the theme.,
          type: string
        }
        linkColor: {
          description: Link color of the theme.,
          type: string
        }
        pageColor: {
          description: Page color of the theme.,
          type: string
        }
    ValidationRuleRepresentation:
      type: object
      description: Validation rule metadata.
      properties:
        errorDisplayField: {
          description: Field in which error message needs to be displayed,
          type: string
        }
        errorMessage: {
          description: Message to be displayed when this validation rule fails,
          type: string
        }
        formulaJavascript: {
          description: Javascript equivalent of the validation rule formula,
          type: string
        }
        formulaReferences:
          description: List of api names of reference fields
          type: array
          items: {
            type: string
          }
        id: {
          description: Id of the validation rule,
          type: string
        }
        name: {
          description: Unique name of the rule,
          type: string
        }
    ValidationRulesRepresentation:
      type: object
      description: Validation rules metadata.
      properties:
        rules:
          description: List of validation rules for an entity
          type: array
          items: {
            $ref: '#/components/schemas/ValidationRuleRepresentation'
          }
    VisualforceLayoutComponentRepresentation:
      allOf:
      - {
        $ref: '#/components/schemas/AbstractRecordLayoutComponentRepresentation'
      }
      - type: object
        description: Visualforce record layout component.
        properties:
          height: {
            description: Height,
            type: string
          }
          showLabel: {
            description: Indicates whether to show the section label with this VF component.,
            type: boolean
          }
          showScroll: {
            description: Show scroll,
            type: boolean
          }
          visualforceUrl: {
            description: Visualforce URL.,
            type: string
          }
          width: {
            description: Width,
            type: string
          }
tags:
- name: themes
  description: 'EXAMPLE resource description'
- name: apps
  description: 'EXAMPLE resource description'
- name: duplicates
  description: 'EXAMPLE resource description'
- name: favorites
  description: 'EXAMPLE resource description'
- name: forms
  description: 'EXAMPLE resource description'
- name: layout
  description: 'EXAMPLE resource description'
- name: listinfo
  description: 'EXAMPLE resource description'
- name: listrecords
  description: 'EXAMPLE resource description'
- name: listui
  description: 'EXAMPLE resource description'
- name: lookups
  description: 'EXAMPLE resource description'
- name: mrulistinfo
  description: 'EXAMPLE resource description'
- name: mrulistrecords
  description: 'EXAMPLE resource description'
- name: mrulistui
  description: 'EXAMPLE resource description'
- name: navitems
  description: 'EXAMPLE resource description'
- name: objectinfo
  description: 'EXAMPLE resource description'
- name: predupe
  description: 'EXAMPLE resource description'
- name: recordavatars
  description: 'EXAMPLE resource description'
- name: recorddefaults
  description: 'EXAMPLE resource description'
- name: recordui
  description: 'EXAMPLE resource description'
- name: records
  description: 'EXAMPLE resource description'   
